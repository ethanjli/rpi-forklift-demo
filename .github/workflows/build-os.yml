name: build-os
on:
  workflow_call:
    inputs:
      name:
        description: 'The name of the OS image to build'
        required: true
        type: string
      base_release_name:
        description: 'The release name of the RPi OS base image (bullseye, bookworm)'
        required: true
        type: string
      base_image_variant:
        description: 'The name of the RPi OS base image variant (lite, desktop, or full)'
        required: true
        type: string
      base_release_date:
        description: 'The release date of the RPi OS base image'
        required: true
        type: string
      arch:
        description: 'The CPU architecture of the OS (armhf, arm64)'
        required: true
        type: string

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    env:
      OUTPUT_IMAGE_NAME: ${{ inputs.name }}-${{ inputs.base_release_name }}-${{ inputs.arch }}-${{ inputs.base_image_variant }}
      KERNEL_VERSION: 6.1.21
      SETUP_USER: pi
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Determine Raspberry Pi OS base image URL
        id: rpi-os-image
        run: |
          case '${{ inputs.base_release_name }}' in
            'bookworm')
              IMAGE_RELEASE_CHANNEL='raspios'
              ;;
            'bullseye')
              IMAGE_RELEASE_CHANNEL='raspios_oldstable'
              ;;
            *)
              echo "Unknown release name: ${{ inputs.base_release_name }}"
              exit 1
              ;;
          esac
          IMAGE_REPO_GROUP="$IMAGE_RELEASE_CHANNEL"
          if [[ "${{ inputs.base_image_variant }}" != "desktop" ]]; then
            IMAGE_REPO_GROUP="${IMAGE_REPO_GROUP}_${{ inputs.base_image_variant }}"
          fi
          IMAGE_REPO_GROUP="${IMAGE_REPO_GROUP}_${{ inputs.arch }}"
          IMAGE_FILENAME="${{ inputs.base_release_date }}-raspios-${{ inputs.base_release_name }}-${{ inputs.arch }}"
          if [[ "${{ inputs.base_image_variant }}" != "desktop" ]]; then
            IMAGE_FILENAME="${IMAGE_FILENAME}-${{ inputs.base_image_variant }}"
          fi
          IMAGE_FILENAME="${IMAGE_FILENAME}.img.xz"
          IMAGE_URL="https://downloads.raspberrypi.com/$IMAGE_REPO_GROUP/images/$IMAGE_REPO_GROUP-${{ inputs.base_release_date }}/$IMAGE_FILENAME"
          echo "RPi OS image filename: $IMAGE_FILENAME"
          echo "image_filename=$IMAGE_FILENAME" >> $GITHUB_OUTPUT
          echo "RPi OS image URL: $IMAGE_URL"
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Download and cache base image
        id: download-base
        uses: valadaptive/download-file-action@v0.1.0
        with:
          url: ${{ steps.rpi-os-image.outputs.image_url }}
          destination: /tmp/${{ steps.rpi-os-image.outputs.image_filename }}

      - name: Decompress & grow base image
        id: expand-image
        uses: ethanjli/pigrow-action@v0.1.1
        with:
          image: ${{ steps.download-base.outputs.destination }}
          mode: to
          size: 8G

      - name: Prepare for running OS build scripts
        run: |
          sudo apt-get install systemd-container qemu-user-static binfmt-support qemu-system-aarch64

      # Note: for performance reasons, we run most setup steps in a systemd-nspawn container. We
      # could boot it if we wanted (and it works fine for setup on a -lite base image), but for
      # some reason setup doesn't work on a -desktop base image (systemd calls during setup all fail
      # with a "Transport endpoint is not connected" error)
      - name: Run OS build scripts in an unbooted container
        run: |
          image="${{ steps.expand-image.outputs.destination }}"
          device="$(sudo ./tools/mount.sh "$image")"

          sudo systemd-nspawn --image "${device}p2" \
            --bind "$(pwd)"/os-setup:/run/os-setup \
            su - ${{ env.SETUP_USER }} /run/os-setup/setup/setup-unbooted.sh

          sudo ./tools/unmount.sh "$device"

      - name: Prepare to run remaining OS build scripts in a booted VM
        id: prepare-vm
        run: |
          image="${{ steps.expand-image.outputs.destination }}"
          sysroot="$(sudo mktemp -d --tmpdir=/mnt sysroot.XXXXXXX)"
          device="$(sudo ./tools/mount.sh "$image" "$sysroot")"

          sudo systemd-nspawn --directory "$sysroot" \
            --bind "$(pwd)"/os-setup:/run/os-setup \
            /run/os-setup/ci-pre-vm-boot.sh ${{ env.SETUP_USER }}
          sudo cp -r $sysroot/boot /run/vm-boot
          sudo systemd-nspawn --directory "$sysroot" \
            --bind "$(pwd)"/tools:/run/tools \
            --bind /run/vm-boot:/run/vm-boot \
            /run/tools/build-custom-dtb.sh \
              /run/vm-boot/bcm2710-rpi-3-b-plus.dtb \
              /run/vm-boot/bcm2710-rpi-3-b-plus-qemu.dtb
          echo "dtb=/run/vm-boot/bcm2710-rpi-3-b-plus-qemu.dtb" >> $GITHUB_OUTPUT

          sudo ./tools/unmount.sh "$device" "$sysroot"

      # Note: we need to boot the OS in a VM rather than a systemd-nspawn container because
      # `docker.service` can't start properly in the container due to its interaction with
      # the kernel and with systemd-nspawn (in bullseye Docker's use of iptables/nftables results in
      # error "Failed to initialize nft: Protocol not supported"; in bookworm Docker's use of
      # cgroups results in error "failed to start daemon: Devices cgroup isn't mounted", probably
      # because systemd-nspawn makes cgroups read-only while Docker needs to manipulate cgroups).
      # TODO: decompose bookworm-compatible raspi3b dtb generation and qemu booting into a script
      # used by a GitHub Action; also inject a service, defaulting to a service which just shuts
      # down after boot has finished
      - name: Run OS build scripts in a booted VM
        run: |
          image="${{ steps.expand-image.outputs.destination }}"
          qemu-system-aarch64 -nographic \
            -machine raspi3b -dtb ${{ steps.prepare-vm.outputs.dtb }} \
            -cpu cortex-a72 -smp 4 -m 1G \
            -kernel /run/vm-boot/kernel8.img \
            -drive file=$image,if=sd,format=raw,index=0,media=disk \
            -netdev user,id=net0,hostfwd=tcp::2222-:22 -device usb-net,netdev=net0 \
            -append "rw earlyprintk loglevel=8 console=ttyAMA0,115200 dwc_otg.lpm_enable=0 root=/dev/mmcblk0p2 rootdelay=1"

      - name: Clean up after VM boot
        run: |
          image="${{ steps.expand-image.outputs.destination }}"
          device="$(sudo ./tools/mount.sh "$image")"

          sudo systemd-nspawn --image "${device}p2" \
            --bind "$(pwd)"/os-setup:/run/os-setup \
            /run/os-setup/ci-post-vm-boot.sh ${{ env.SETUP_USER }}

          sudo ./tools/unmount.sh "$device"

      - name: Prepare for a headless first boot on bare metal
        run: |
          image="${{ steps.expand-image.outputs.destination }}"
          device="$(sudo ./tools/mount.sh "$image")"

          sudo systemd-nspawn --image "${device}p2" \
            --bind "$(pwd)"/os-setup:/run/os-setup \
            /run/os-setup/ci-pre-headless-boot.sh

          sudo ./tools/unmount.sh "$device"

      - name: Shrink the OS image
        uses: ethanjli/pishrink-action@v0.1.2
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          destination: ${{ env.OUTPUT_IMAGE_NAME }}.img
          compress: gzip
          compress-parallel: true

      - name: Upload image to Job Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_IMAGE_NAME }}
          path: ${{ env.OUTPUT_IMAGE_NAME }}.img.gz
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true
