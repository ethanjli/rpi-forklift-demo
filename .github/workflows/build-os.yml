name: build-os
on:
  workflow_call:
    inputs:
      name:
        description: 'The name of the OS image to build'
        required: true
        type: string
      base_release_name:
        description: 'The release name of the RPi OS base image (bullseye, bookworm)'
        required: true
        type: string
      base_image_variant:
        description: 'The name of the RPi OS base image variant (lite, desktop, or full)'
        required: true
        type: string
      base_release_date:
        description: 'The release date of the RPi OS base image'
        required: true
        type: string
      arch:
        description: 'The CPU architecture of the OS (armhf, arm64)'
        required: true
        type: string

jobs:
  build:
    name: Build image
    runs-on: ubuntu-latest
    env:
      OUTPUT_IMAGE_NAME: ${{ inputs.name }}-${{ inputs.base_release_name }}-${{ inputs.arch }}-${{ inputs.base_image_variant }}
      KERNEL_VERSION: 6.1.21
      SETUP_USER: pi
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Determine Raspberry Pi OS base image URL
        id: rpi-os-image
        run: |
          case '${{ inputs.base_release_name }}' in
            'bookworm')
              IMAGE_RELEASE_CHANNEL='raspios'
              ;;
            'bullseye')
              IMAGE_RELEASE_CHANNEL='raspios_oldstable'
              ;;
            *)
              echo "Unknown release name: ${{ inputs.base_release_name }}"
              exit 1
              ;;
          esac
          IMAGE_REPO_GROUP="$IMAGE_RELEASE_CHANNEL"
          if [[ "${{ inputs.base_image_variant }}" != "desktop" ]]; then
            IMAGE_REPO_GROUP="${IMAGE_REPO_GROUP}_${{ inputs.base_image_variant }}"
          fi
          IMAGE_REPO_GROUP="${IMAGE_REPO_GROUP}_${{ inputs.arch }}"
          IMAGE_FILENAME="${{ inputs.base_release_date }}-raspios-${{ inputs.base_release_name }}-${{ inputs.arch }}"
          if [[ "${{ inputs.base_image_variant }}" != "desktop" ]]; then
            IMAGE_FILENAME="${IMAGE_FILENAME}-${{ inputs.base_image_variant }}"
          fi
          IMAGE_FILENAME="${IMAGE_FILENAME}.img.xz"
          IMAGE_URL="https://downloads.raspberrypi.com/$IMAGE_REPO_GROUP/images/$IMAGE_REPO_GROUP-${{ inputs.base_release_date }}/$IMAGE_FILENAME"
          echo "RPi OS image filename: $IMAGE_FILENAME"
          echo "image_filename=$IMAGE_FILENAME" >> $GITHUB_OUTPUT
          echo "RPi OS image URL: $IMAGE_URL"
          echo "image_url=$IMAGE_URL" >> $GITHUB_OUTPUT

      - name: Download and cache base image
        id: download-base
        uses: ethanjli/cached-download-action@v0.1.1
        with:
          url: ${{ steps.rpi-os-image.outputs.image_url }}
          destination: /tmp/${{ steps.rpi-os-image.outputs.image_filename }}

      - name: Decompress & grow base image
        id: expand-image
        uses: ethanjli/pigrow-action@v0.1.1
        with:
          image: ${{ steps.download-base.outputs.destination }}
          mode: to
          size: 8G

      # Note: for performance reasons, we run most setup steps in a systemd-nspawn container. We
      # could boot it if we wanted (and it works fine for setup on a -lite base image), but for
      # some reason setup doesn't work on a -desktop base image (systemd calls during setup all fail
      # with a "Transport endpoint is not connected" error)
      - name: Run OS build scripts in an unbooted container
        uses: ethanjli/pinspawn-action@v0.1.3
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          user: ${{ env.SETUP_USER }}
          args: --bind "$(pwd)"/os-setup:/run/os-setup
          run: |
            export DEBIAN_FRONTEND=noninteractive
            echo "Running setup scripts..."
            /run/os-setup/setup/setup-unbooted.sh

      - name: Copy the setup scripts into the image to run remaining OS build scripts in a booted VM
        uses: ethanjli/pinspawn-action@v0.1.3
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          args: --bind "$(pwd)"/os-setup:/run/os-setup
          run: |
            sudo update-alternatives --set iptables /usr/sbin/iptables-legacy
            sudo update-alternatives --set ip6tables /usr/sbin/ip6tables-legacy
            sudo cp -r /run/os-setup /usr/lib/os-setup

      # Note: for now, we need to boot the OS in a QEMU VM rather than a systemd-nspawn container 
      # (even though the VM is much much slower) because `docker.socket`/`docker.service` can't
      # start properly in the container due to its use of iptables-nft: Docker's use of
      # iptables/nftables results in error "Failed to initialize nft: Protocol not supported".
      # Once GitHub makes arm64 runners available to open-source projects, then we can get rid of
      # QEMU and we may be able to successfully start Docker in a systemd-nspawn container.
      # Also, `docker.socket` needs a working v2 cgroup, and for some reason starting bookworm in
      # a systemd-nspawn container on the ubuntu-latest (22.04) runner causes systemd to use cgroup
      # v1 with a reduced surface area instead of v2 with a full surface area (even though this
      # problem doesn't occur on bullseye!); currently QEMU on ubuntu-24.04 segfaults when I try to
      # do setup, so that's not an option yet.
      - name: Run OS build scripts in a booted VM
        #uses: ethanjli/piqemu-action@v0.1.1
        uses: ethanjli/pinspawn-action@v0.1.3
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          #machine: rpi-3b+
          boot: true
          user: ${{ env.SETUP_USER }}
          shell: /usr/lib/os-setup/setup/setup-booted.sh

      - name: Clean up after booted setup
        uses: ethanjli/pinspawn-action@v0.1.3
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          user: ${{ env.SETUP_USER }}
          args: --bind "$(pwd)"/os-setup:/run/os-setup
          run: |
            sudo rm -rf /usr/lib/os-setup
            /run/os-setup/setup/cleanup.sh

      - name: Prepare for a headless first boot on bare metal
        uses: ethanjli/pinspawn-action@v0.1.3
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          run: |
            # Change default settings for the SD card to enable headless & keyboardless first boot
            # Note: we could change the username by making a `/boot/userconf.txt` file with the new
            # username and an encrypted representation of the password (and un-disabling and
            # unmasking `userconfig.service`), but we don't need to do that for now.
            # See https://github.com/RPi-Distro/userconf-pi/blob/bookworm/userconf-service and
            # https://www.raspberrypi.com/documentation/computers/configuration.html#configuring-a-user
            # and the "firstrun"-related and "cloudinit"-related lines of
            # https://github.com/raspberrypi/rpi-imager/blob/qml/src/OptionsPopup.qml and
            # the RPi SD card image's `/usr/lib/raspberrypi-sys-mods/firstboot` and
            # `/usr/lib/raspberrypi-sys-mods/imager_custom` scripts
            echo "pi:copepode" | chpasswd
            sed -i -e "s~^XKBLAYOUT=.*~XKBLAYOUT=\"us\"~" /etc/default/keyboard
            systemctl disable userconfig.service

            # This is needed to have the login prompt on tty1 (so that a user with a keyboard can
            # log in without switching away from the default tty), because we disabled
            # userconfig.service. See
            # https://forums.raspberrypi.com/viewtopic.php?p=2032694#p2032694
            systemctl enable getty@tty1

      - name: Shrink the OS image
        uses: ethanjli/pishrink-action@v0.1.2
        with:
          image: ${{ steps.expand-image.outputs.destination }}
          destination: ${{ env.OUTPUT_IMAGE_NAME }}.img
          compress: gzip
          compress-parallel: true

      - name: Upload image to Job Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OUTPUT_IMAGE_NAME }}
          path: ${{ env.OUTPUT_IMAGE_NAME }}.img.gz
          if-no-files-found: error
          retention-days: 0
          compression-level: 0
          overwrite: true
